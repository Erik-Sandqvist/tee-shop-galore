name: CI/CD Pipeline

'on':
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Lint och kod-kvalitetskontroll
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint --if-present
        continue-on-error: false

      - name: Type check
        run: npx tsc --noEmit
        continue-on-error: false

  # Job 2: KÃ¶r tester
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --run --reporter=verbose

      - name: Generate coverage report
        run: npm run test:coverage --if-present
        continue-on-error: true

    #   - name: Upload coverage to Codecov
    #     uses: codecov/codecov-action@v4
    #     if: always()
    #     continue-on-error: true
    #     with:
    #       token: ${{ secrets.CODECOV_TOKEN }}
    #       files: ./coverage/coverage-final.json
    #       flags: unittests
    #       name: codecov-umbrella

  # Job 3: Build check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Check build size
        run: |
          echo "Build completed successfully"
          du -sh dist
          
  # Job 4: Deploy till Vercel Preview (fÃ¶r PRs och develop)
  deploy-preview:
    name: Deploy to Vercel Preview
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Preview deployment ready!\n\nâœ¨ Preview URL: ${{ steps.deploy.outputs.preview_url }}'
            })

  # Job 5: Deploy till Vercel Production (endast main branch)
  deploy-production:
    name: Deploy to Vercel Production
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Production
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: '${{ steps.deploy.outputs.production_url }}',
              description: 'Deployment successful',
              context: 'Vercel Production'
            })

  # Job 6: SÃ¤kerhetsscanning (valfritt men rekommenderat)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

    #   - name: Run Snyk security scan
    #     uses: snyk/actions/node@master
    #     continue-on-error: true
    #     env:
    #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #     with:
    #       args: --severity-threshold=high